{
    "version": 3,
    "sources": [
        "../../../src/home/controller/task.js"
    ],
    "names": [
        "saveorupdateAction",
        "taskEntity",
        "post",
        "id",
        "model",
        "where",
        "update",
        "affectedRows",
        "json",
        "code",
        "add",
        "insertId",
        "error",
        "listAction",
        "user_name",
        "get",
        "status",
        "level",
        "order",
        "JSON",
        "parse",
        "page",
        "countSelect",
        "data",
        "getAction",
        "find",
        "deleteAction",
        "delete",
        "Base"
    ],
    "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;AAGE;;;;mBAIMA,kB;;;;;;;;AAEIC,wB,GAAa,KAAKC,IAAL,E;AACbC,gB,GAAOF,U,CAAPE,E;;mBACFA,E;;;;;;qBACuB,KAAKC,KAAL,CAAW,MAAX,EAAmBC,KAAnB,CAAyB,EAAEF,MAAF,EAAzB,EAAiCG,MAAjC,CAAwCL,UAAxC,C;;;AAArBM,0B;;AACJ,mBAAKC,IAAL,CAAU;AACRC,sBAAM,GADE;AAERF;AAFQ,eAAV;;;;;;qBAKqB,KAAKH,KAAL,CAAW,MAAX,EAAmBM,GAAnB,CAAuBT,UAAvB,C;;;AAAjBU,sB;;AACJ,mBAAKH,IAAL,CAAU;AACRC,sBAAM,GADE;AAERE;AAFQ,eAAV;;;;;;;;;;AAMF,mBAAKH,IAAL,CAAU;AACRC,sBAAM,GADE;AAERG;AAFQ,eAAV;;;;;;;;;;;;;;;;;mBAMEC,U;;;;;;;;AAEER,mB,GAAQ;AACVS,2BAAW,KAAKC,GAAL,CAAS,WAAT;AADD,e;;AAGZ,kBAAI,KAAKA,GAAL,CAAS,QAAT,MAAuB,IAA3B,EAAiC;AAC/BV,sBAAMW,MAAN,GAAe,KAAKD,GAAL,CAAS,QAAT,CAAf;AACD;AACD,kBAAI,KAAKA,GAAL,CAAS,OAAT,MAAsB,IAA1B,EAAgC;AAC9BV,sBAAMY,KAAN,GAAc,KAAKF,GAAL,CAAS,OAAT,CAAd;AACD;AACGG,mB,GAAQ,EAAEf,IAAI,MAAN,E;;AACZ,kBAAI,KAAKY,GAAL,CAAS,OAAT,CAAJ,EAAuB;AACrBG,wBAAQC,KAAKC,KAAL,CAAW,KAAKL,GAAL,CAAS,OAAT,CAAX,CAAR;AACD;;qBACgB,KAAKX,KAAL,CAAW,MAAX,EAAmBC,KAAnB,CAAyBA,KAAzB,EAAgCgB,IAAhC,CAAqC,KAAKN,GAAL,CAAS,SAAT,CAArC,EAA0D,KAAKA,GAAL,CAAS,UAAT,CAA1D,EAAgFG,KAAhF,CAAsFA,KAAtF,EAA6FI,WAA7F,E;;;AAAbC,kB;;AACJ,mBAAKf,IAAL,CAAU;AACRC,sBAAM,GADE;AAERc;AAFQ,eAAV;;;;;;;;AAKA,mBAAKf,IAAL,CAAU;AACRC,sBAAM,GADE;AAERG;AAFQ,eAAV;;;;;;;;;;;;;;;;;mBAMEY,S;;;;;;;;;qBAEe,KAAKpB,KAAL,CAAW,MAAX,EAAmBC,KAAnB,CAAyB,EAAEF,IAAI,KAAKY,GAAL,CAAS,IAAT,CAAN,EAAzB,EAAiDU,IAAjD,E;;;AAAbF,kB;;AACJ,mBAAKf,IAAL,CAAU;AACRC,sBAAM,GADE;AAERc;AAFQ,eAAV;;;;;;;;AAKA,mBAAKf,IAAL,CAAU;AACRC,sBAAM,GADE;AAERG;AAFQ,eAAV;;;;;;;;;;;;;;;;;mBAMEc,Y;;;;;;;;;qBAEuB,KAAKtB,KAAL,CAAW,MAAX,EAAmBC,KAAnB,CAAyB,EAAEF,IAAI,KAAKD,IAAL,CAAU,IAAV,CAAN,EAAzB,EAAkDyB,MAAlD,E;;;AAArBpB,0B;;AACJ,mBAAKC,IAAL,CAAU;AACRC,sBAAM,GADE;AAERF;AAFQ,eAAV;;;;;;;;AAKA,mBAAKC,IAAL,CAAU;AACRC,sBAAM,GADE;AAERG;AAFQ,eAAV;;;;;;;;;;;;;;;;;;EA9EuBgB,c",
    "file": "../../../src/home/controller/task.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\n\nexport default class extends Base {\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  async saveorupdateAction() {\n    try {\n      const taskEntity = this.post()\n      let { id } = taskEntity\n      if (id) { // update\n        let affectedRows = await this.model('task').where({ id }).update(taskEntity);\n        this.json({\n          code: 200,\n          affectedRows\n        })\n      } else { // new\n        let insertId = await this.model('task').add(taskEntity)\n        this.json({\n          code: 200,\n          insertId\n        })\n      }\n    } catch (error) {\n      this.json({\n        code: 500,\n        error\n      })\n    }\n  }\n  async listAction() {\n    try {\n      let where = {\n        user_name: this.get('user_name'),\n      }\n      if (this.get('status') !== '-1') {\n        where.status = this.get('status')\n      }\n      if (this.get('level') !== '-1') {\n        where.level = this.get('level')\n      }\n      let order = { id: 'desc' }\n      if (this.get('order')) {\n        order = JSON.parse(this.get('order'))\n      }\n      let data = await this.model('task').where(where).page(this.get('current'), this.get('pageSize')).order(order).countSelect()\n      this.json({\n        code: 200,\n        data\n      })\n    } catch (error) {\n      this.json({\n        code: 500,\n        error\n      })\n    }\n  }\n  async getAction() {\n    try {\n      let data = await this.model('task').where({ id: this.get('id') }).find()\n      this.json({\n        code: 200,\n        data\n      })\n    } catch (error) {\n      this.json({\n        code: 500,\n        error\n      })\n    }\n  }\n  async deleteAction() {\n    try {\n      let affectedRows = await this.model('task').where({ id: this.post('id') }).delete()\n      this.json({\n        code: 200,\n        affectedRows\n      })\n    } catch (error) {\n      this.json({\n        code: 500,\n        error\n      })\n    }\n  }\n}"
    ]
}